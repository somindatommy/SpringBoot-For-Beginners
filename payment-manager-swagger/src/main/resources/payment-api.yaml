openapi: 3.0.3
info:
  title: Spring Demo Payment Server - OpenAPI 3.0
  description: |-
    This is a simple set of APIs designed for a demonstration of Spring Boot. These definitions will be used to generate Spring Stubs using swagger code generator.
    
    
    Links:
    - [Medium - Sominda Gamage](https://somindagamage.medium.com/)
    - [Source code](https://github.com/somindatommy/SpringBoot-For-Beginners)
  version: 0.0.1
  contact:
    email: dummyemail@gmail.com


servers:
  - url: http://{server-url}/api/v1
    variables:
      server-url:
        default: "localhost:8080"

security:
  - JWTBearer: []
tags:
  - name: Payments
    description: Manage payment related operations
paths:
  /payments:
    post:
      tags:
        - Payments
      summary: Initiate a payment request
      description: Initiate a payment with another user
      operationId: payUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiatePaymentRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInitiatorResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - Payments
      summary: Get all payments
      description: Get all the payments
      operationId: getAllPayments
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPayments'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /payments/{payment_id}:
    get:
      tags:
        - Payments
      summary: Get payment by id
      description: Get payment by id
      operationId: getPaymentById
      parameters:
        - name: payment_id
          in: path
          description: Payment Id to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /payments/status/{status}:
    get:
      tags:
        - Payments
      summary: Get payments by the status
      description: Get all payments matching the given status
      operationId: getPaymentsByStatus
      parameters:
        - name: status
          in: path
          description: Status.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPayments'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ListPayments:
      type: array
      items:
        $ref: '#/components/schemas/Payment'
    Payment:
      type: object
      description: Payment Object
      properties:
        paymentId:
          type: string
          example: 'PAY-20250227-204927-126871628939123-00001'
        initiatorId:
          type: string
          example: "initiator_1"
          description: "Payment initiated user"
        receiverId:
          type: string
          example: "receiver_1"
          description: "Payment receiving user"
        amount:
          type: number
          format: double
          example: 100.00
          description: "Amount to be transferred as a double"
        status:
          type: string
          example: "PENDING"
          description: "Status of the generated transaction"
        initiatedTime:
          type: string
          format: date-time
          example: '2025-02-27 20:49:27'
          description: "Transaction initiated time"
      required:
        - paymentId
        - initiatorId
        - receiverId
        - amount
        - status
        - initiatedTime
    InitiatePaymentRequest:
      type: object
      description: This will be used to initiate a payment request
      required:
        - initiator
        - receiver
      properties:
        initiator:
          type: string
          example: "initiator_1"
          description: "Payment initiated user"
        receiver:
          type: string
          example: "receiver_1"
          description: "Payment receiving user"
        amount:
          type: number
          format: double
          example: 100.00
          description: "Amount to be transferred as a double"
    PaymentInitiatorResponse:
      type: object
      description: Object will be the response for initiate payment request.
      required:
        - paymentId
        - status
      properties:
        paymentId:
          type: string
          example: "PAY-20250227-204927-126871628939123-00001"
          description: "Generated payment id"
        status:
          type: string
          example: "PENDING"
          description: "Status of the generated transaction"
    Error:
      type: object
      properties:
        code:
          type: string
          example: "PMS-00000"
        message:
          type: string
          example: "Some error message."
        description:
          type: string
          example: "Some error description."
  securitySchemes:
    JWTBearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  